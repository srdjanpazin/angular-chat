{"ast":null,"code":"import { toggleChatInfo } from '../../state/actions/panels.actions';\nimport { selectCurrentChatId } from '../../state/selectors/chats.selectors';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/chat.service\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/shared/pusher.service\";\nconst _c0 = [\"body\"];\nconst _c1 = [\"infoBtn\"];\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(chatService, renderer, store, pusherService) {\n      this.chatService = chatService;\n      this.renderer = renderer;\n      this.store = store;\n      this.pusherService = pusherService;\n      this.isHidden = false;\n      this.infoActive = false;\n      this.lastMsgId = null;\n    }\n    ngOnInit() {\n      this.messagesChannel = this.pusherService.pusher.subscribe(`${this.chatId}`);\n      this.messagesChannel.bind('new-message', data => {\n        // If the incoming message is from this user, return\n        if (data.user === this.currentUser) return;\n        const markup = `\n        <div class=\"msg-cont\">\n          <div class=\"msg-left msg\">${data.message}\n            <div class=\"time-tooltip\">${data.time}</div>\n          </div>\n        </div>`;\n        const msgEl = this.renderer.createElement('div');\n        this.renderer.setAttribute(msgEl, 'id', `m${++this.lastMsgId}`);\n        this.renderer.setProperty(msgEl, 'innerHTML', markup);\n        this.renderer.appendChild(this.body.nativeElement, msgEl);\n        msgEl.scrollIntoView();\n      });\n      this.stateSubscription = this.store.select(selectCurrentChatId).subscribe(currentChatId => {\n        this.currentChatId = currentChatId;\n      });\n      // Get chat messages\n      this.chatService.getMessages(this.chatId).pipe(take(1)).subscribe({\n        next: data => {\n          const body = this.body.nativeElement;\n          this.renderer.setProperty(body, 'innerHTML', data);\n          if (body.lastElementChild != null) {\n            body.lastElementChild.scrollIntoView();\n            this.lastMsgId = body.lastElementChild.id ? parseInt(body.lastElementChild.id.slice(1), 10) : null;\n          }\n        }\n        // complete: () => { this.chatLoadedSubject.next(); }       \n      });\n    }\n\n    ngOnDestroy() {\n      this.stateSubscription.unsubscribe();\n    }\n    toggleChatInfo() {\n      if (this.infoActive) this.renderer.removeClass(this.infoBtn.nativeElement, 'active');else this.renderer.addClass(this.infoBtn.nativeElement, 'active');\n      this.infoActive = !this.infoActive;\n      this.store.dispatch(toggleChatInfo());\n    }\n    static #_ = this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.PusherService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      viewQuery: function ChatComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.body = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.infoBtn = _t.first);\n        }\n      },\n      hostVars: 1,\n      hostBindings: function ChatComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"hidden\", ctx.isHidden);\n        }\n      },\n      inputs: {\n        currentUser: \"currentUser\",\n        contactName: \"contactName\",\n        chatId: \"chatId\",\n        imgSrc: \"imgSrc\"\n      },\n      decls: 11,\n      vars: 2,\n      consts: [[1, \"chat-head\"], [1, \"chat-img\"], [1, \"h-contact-name\"], [1, \"flex-spacer\"], [1, \"info-btn\", 3, \"click\"], [\"infoBtn\", \"\"], [\"src\", \"/assets/info-icon.svg\"], [1, \"chat-body\"], [\"body\", \"\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n          i0.ɵɵelement(2, \"img\", 1);\n          i0.ɵɵelementStart(3, \"h3\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"div\", 3);\n          i0.ɵɵelementStart(6, \"button\", 4, 5);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_6_listener() {\n            return ctx.toggleChatInfo();\n          });\n          i0.ɵɵelement(8, \"img\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(9, \"div\", 7, 8);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵattribute(\"src\", ctx.imgSrc, i0.ɵɵsanitizeUrl);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.contactName);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{flex-grow:1;max-height:100%}[_nghost-%COMP%] > div[_ngcontent-%COMP%]{height:100%;display:flex;flex-direction:column;flex-grow:1}.chat-head[_ngcontent-%COMP%]{height:60px;width:100%;display:flex;border-bottom:1px solid var(--inner-border);padding:8px;align-items:center;font-size:20px;font-weight:700;z-index:1}.chat-img[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:50%;margin:0 10px 0 2px}.h-contact-name[_ngcontent-%COMP%]{font-weight:500}.info-btn[_ngcontent-%COMP%]{margin:0;border:none;border-radius:50%;padding:1px;background:inherit;cursor:pointer}.active[_ngcontent-%COMP%]{background:skyblue}.info-btn[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{display:block}.flex-spacer[_ngcontent-%COMP%]{flex-grow:1}.chat-body[_ngcontent-%COMP%]{width:100%;height:300px;overflow:auto;flex-grow:1}\"]\n    });\n  }\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}