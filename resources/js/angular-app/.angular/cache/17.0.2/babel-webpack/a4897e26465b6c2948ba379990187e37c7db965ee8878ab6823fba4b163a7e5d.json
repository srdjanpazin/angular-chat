{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n    getMessages(chatId) {\n      return this.httpClient.get('/chat/${chatId}').pipe(catchError(this.handleError));\n    }\n    getContactsInfo() {\n      return this.httpClient.get('/contacts').pipe(catchError(this.handleError));\n    }\n    sendMessage(msg, chatName) {\n      const body = new HttpParams().set('chat', chatName).set('content', msg);\n      return this.httpClient.post('/chat/${chatName}/send-message', body, {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded'),\n        responseType: 'text'\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Error handler function\n     */\n    handleError(err) {\n      if (err.status === 0) {\n        // A client-side or network error occured.\n        console.error('Error:', err.error);\n      } else if (err.status !== 200) {\n        console.error(`Server responded with ${err.status}\\nbody: ${err.error}`);\n      } else {\n        console.error(`Server responded with ${err.status}\nbody: ${err.error.text}\\n${err.error.error.stack}`);\n      }\n      return throwError('Something bad happened');\n    }\n    static #_ = this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}