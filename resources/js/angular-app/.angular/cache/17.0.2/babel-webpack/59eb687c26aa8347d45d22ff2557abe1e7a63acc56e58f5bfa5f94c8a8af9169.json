{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport { addChat, changeChat } from 'src/app/state/actions/chats.actions';\nimport { selectUserId } from 'src/app/state/selectors/user.selectors';\nimport { ChatComponent } from '../chat/chat.component';\nimport { ChatDirective } from '../chat.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/chat.service\";\nimport * as i2 from \"src/app/shared/event.service\";\nimport * as i3 from \"@ngrx/store\";\nfunction ChatAppComponent_ng_template_3_Template(rf, ctx) {}\nfunction ChatAppComponent_app_chat_info_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chat-info\");\n  }\n}\nexport let ChatAppComponent = /*#__PURE__*/(() => {\n  class ChatAppComponent {\n    constructor(chatService, eventService, renderer, store, cfr) {\n      this.chatService = chatService;\n      this.eventService = eventService;\n      this.renderer = renderer;\n      this.store = store;\n      this.cfr = cfr;\n      this.loadedChats = {};\n      this.chatInfoShown = true;\n    }\n    ngOnInit() {\n      this.store.select(selectUserId).pipe(take(1)).subscribe(userId => {\n        this.currentUser = userId;\n        if (!this.currentUser) {\n          location.assign('/login');\n          return;\n        }\n      });\n      const componentFactory = this.cfr.resolveComponentFactory(ChatComponent);\n      this.panelStateSubs = this.store.select('panels').subscribe(data => {\n        this.chatInfoShown = data.chatInfo;\n      });\n      this.eventSubs = this.eventService.contactClickObservable().subscribe(data => {\n        const {\n          chatId,\n          contactName,\n          imgSrc\n        } = data;\n        if (this.currentChatId === chatId) {\n          return;\n        }\n        this.loadedChats[this.currentChatId].instance.isHidden = true;\n        // Redisplay the loaded component if there is one\n        if (this.loadedChats.hasOwnProperty(chatId)) {\n          const chat = this.loadedChats[chatId].instance;\n          chat.isHidden = false;\n          this.currentChatId = chatId;\n          this.store.dispatch(changeChat({\n            chatId: chatId\n          }));\n          return;\n        }\n        // Else create a new component and add the chat to the loaded chats state\n        this.store.dispatch(addChat({\n          chatId: chatId,\n          contactName: contactName,\n          contactImage: imgSrc\n        }));\n        const componentRef = this.chatHost.viewContainerRef.createComponent(componentFactory);\n        const instance = componentRef.instance;\n        instance.currentUser = this.currentUser;\n        instance.chatId = chatId;\n        instance.contactName = contactName;\n        instance.imgSrc = imgSrc;\n        this.currentChatId = chatId;\n        this.loadedChats[chatId] = componentRef;\n      });\n    }\n    ngOnDestroy() {\n      this.panelStateSubs.unsubscribe();\n      this.eventSubs.unsubscribe();\n    }\n    loadInitialChat(data) {\n      const componentFactory = this.cfr.resolveComponentFactory(ChatComponent);\n      const componentRef = this.chatHost.viewContainerRef.createComponent(componentFactory);\n      const instance = componentRef.instance;\n      instance.currentUser = this.currentUser;\n      instance.chatId = data.chatId;\n      instance.contactName = data.contactName;\n      instance.imgSrc = data.contactImage;\n      this.currentChatId = data.chatId;\n      this.loadedChats[data.chatId] = componentRef;\n    }\n    sendMessage(msg) {\n      // Create a message element and append it to the chat\n      const msgEl = this.renderer.createElement('div');\n      this.renderer.addClass(msgEl, 'msg-cont');\n      const markup = '<div class=\"flex-padding\"></div><div class=\"msg-right msg\">' + msg + '</div>';\n      this.renderer.setProperty(msgEl, 'innerHTML', markup);\n      this.renderer.appendChild(this.loadedChats[this.currentChatId].instance.body.nativeElement, msgEl);\n      msgEl.scrollIntoView();\n      this.chatService.sendMessage(msg, this.currentChatId).subscribe(() => {});\n    }\n    static #_ = this.ɵfac = function ChatAppComponent_Factory(t) {\n      return new (t || ChatAppComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.EventService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.Store), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatAppComponent,\n      selectors: [[\"app-chat-app\"]],\n      viewQuery: function ChatAppComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(ChatDirective, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chatHost = _t.first);\n        }\n      },\n      decls: 6,\n      vars: 2,\n      consts: [[1, \"chat-wrapper\"], [3, \"currentUser\", \"contactsLoadedEvent\"], [\"chatHost\", \"\"], [3, \"submitEvent\"], [4, \"ngIf\"]],\n      template: function ChatAppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-contacts-sidebar\", 1);\n          i0.ɵɵlistener(\"contactsLoadedEvent\", function ChatAppComponent_Template_app_contacts_sidebar_contactsLoadedEvent_1_listener($event) {\n            return ctx.loadInitialChat($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"main\");\n          i0.ɵɵtemplate(3, ChatAppComponent_ng_template_3_Template, 0, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(4, \"app-chat-input\", 3);\n          i0.ɵɵlistener(\"submitEvent\", function ChatAppComponent_Template_app_chat_input_submitEvent_4_listener($event) {\n            return ctx.sendMessage($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(5, ChatAppComponent_app_chat_info_5_Template, 1, 0, \"app-chat-info\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"currentUser\", ctx.currentUser);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.chatInfoShown);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{display:flex;flex-grow:1}.chat-wrapper[_ngcontent-%COMP%]{display:flex;flex-shrink:1;flex-grow:1}main[_ngcontent-%COMP%]{display:flex;flex-direction:column;flex-grow:1}.chat[_ngcontent-%COMP%]{display:flex;flex-direction:column}.btn[_ngcontent-%COMP%]{color:inherit;background:transparent;font:inherit;padding:0;border-style:none;outline-style:none;cursor:pointer}\"]\n    });\n  }\n  return ChatAppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}