{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ContactComponent } from '../contact/contact.component';\nimport { ContactDirective } from '../contact.directive';\nimport { toggleChatOptions } from '../../state/actions/popups.actions';\nimport { addChat } from '../../state/actions/chats.actions';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../chats/shared/chat.service\";\nimport * as i2 from \"@ngrx/store\";\nconst _c0 = [\"chatOptions\"];\nfunction ContactsSidebarComponent_ul_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 7, 8)(2, \"li\");\n    i0.ɵɵtext(3, \"Create group\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ContactsSidebarComponent_ng_template_8_Template(rf, ctx) {}\nexport let ContactsSidebarComponent = /*#__PURE__*/(() => {\n  class ContactsSidebarComponent {\n    constructor(chatService, componentFactoryResolver, store) {\n      this.chatService = chatService;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.store = store;\n      this.contactsLoadedEvent = new EventEmitter();\n      this.chatOptionsActive = false;\n    }\n    ngOnInit() {\n      this.stateSubscription = this.store.select('popups').subscribe(state => {\n        this.chatOptionsActive = state.chatOptions;\n      });\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ContactComponent);\n      this.chatService.getContactsInfo(this.currentUser).pipe(take(1)).subscribe(data => {\n        const resultSet = data.result;\n        for (let i = 0; i < resultSet.length; i++) {\n          const [userId, fName, lName, imgSrc, chatId] = resultSet[i];\n          if (i === 0) {\n            let chatObj = {\n              chatId: chatId,\n              contactName: fName + ' ' + lName,\n              contactImage: imgSrc\n            };\n            this.store.dispatch(addChat(chatObj));\n            this.contactsLoadedEvent.emit(chatObj);\n          }\n          const componentRef = this.contactHost.viewContainerRef.createComponent(componentFactory);\n          const instance = componentRef.instance;\n          instance.userId = userId;\n          instance.contactName = fName + ' ' + lName;\n          instance.chatId = chatId;\n          instance.imgSrc = imgSrc;\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.stateSubscription.unsubscribe();\n    }\n    toggleChatOptions(e) {\n      e.stopPropagation();\n      this.store.dispatch(toggleChatOptions());\n    }\n    static #_ = this.ɵfac = function ContactsSidebarComponent_Factory(t) {\n      return new (t || ContactsSidebarComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i2.Store));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ContactsSidebarComponent,\n      selectors: [[\"app-contacts-sidebar\"]],\n      viewQuery: function ContactsSidebarComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(ContactDirective, 7);\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactHost = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chatOptions = _t.first);\n        }\n      },\n      inputs: {\n        currentUser: \"currentUser\"\n      },\n      outputs: {\n        contactsLoadedEvent: \"contactsLoadedEvent\"\n      },\n      decls: 9,\n      vars: 1,\n      consts: [[\"id\", \"contacts-sidebar\"], [\"id\", \"sidebar-head\"], [1, \"sidebar-options\"], [3, \"click\"], [\"src\", \"/assets/three_dots_icon.svg\"], [\"class\", \"chat-options app-ul\", 4, \"ngIf\"], [\"contactHost\", \"\"], [1, \"chat-options\", \"app-ul\"], [\"chatOptions\", \"\"]],\n      template: function ContactsSidebarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"aside\", 0)(1, \"div\", 1)(2, \"span\");\n          i0.ɵɵtext(3, \"Contacts\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function ContactsSidebarComponent_Template_button_click_5_listener($event) {\n            return ctx.toggleChatOptions($event);\n          });\n          i0.ɵɵelement(6, \"img\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(7, ContactsSidebarComponent_ul_7_Template, 4, 0, \"ul\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, ContactsSidebarComponent_ng_template_8_Template, 0, 0, \"ng-template\", 6);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.chatOptionsActive);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{border-right:1px solid var(--inner-border);width:340px;flex-shrink:0}@media screen and (max-width: 970px){[_nghost-%COMP%]{width:200px}}#sidebar-head[_ngcontent-%COMP%]{display:flex;font-weight:700;font-size:18px;color:#303030;padding:8px;align-items:center;position:relative}#sidebar-head[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:#303030;font-weight:500;flex-grow:1}.sidebar-options[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{margin:0;border:none;border-radius:50%;padding:8px;cursor:pointer}.sidebar-options[_ngcontent-%COMP%] > button[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{display:block}.chat-options[_ngcontent-%COMP%]{width:250px;background:#f0f0f0;font-size:16px;font-weight:700;border-radius:9px;padding:8px;position:absolute;right:0;top:calc(100% + 8px);z-index:2;cursor:default}.chat-options[_ngcontent-%COMP%] > li[_ngcontent-%COMP%]{box-sizing:border-box;width:100%;padding:8px 9px;cursor:pointer}.chat-options[_ngcontent-%COMP%] > li[_ngcontent-%COMP%]:hover{background:#ddd}.chat-options[_ngcontent-%COMP%]:after{content:\\\"\\\";border-width:12px;border-style:solid;border-color:transparent transparent #f0f0f0 transparent;position:absolute;right:10px;top:-22px}\"]\n    });\n  }\n  return ContactsSidebarComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}